// Lista de signos zodiacales
const signos = [
  { nombre: 'Capricornio', inicio: '22-12', fin: '19-01', emoji: 'üêê' },
  { nombre: 'Acuario', inicio: '20-01', fin: '18-02', emoji: 'üè∫' },
  { nombre: 'Piscis', inicio: '19-02', fin: '20-03', emoji: 'üêü' },
  { nombre: 'Aries', inicio: '21-03', fin: '19-04', emoji: 'üêè' },
  { nombre: 'Tauro', inicio: '20-04', fin: '20-05', emoji: 'üêÇ' },
  { nombre: 'G√©minis', inicio: '21-05', fin: '20-06', emoji: 'üëØ‚Äç‚ôÇÔ∏è' },
  { nombre: 'C√°ncer', inicio: '21-06', fin: '22-07', emoji: 'ü¶Ä' },
  { nombre: 'Leo', inicio: '23-07', fin: '22-08', emoji: 'ü¶Å' },
  { nombre: 'Virgo', inicio: '23-08', fin: '22-09', emoji: 'üåæ' },
  { nombre: 'Libra', inicio: '23-09', fin: '22-10', emoji: '‚öñÔ∏è' },
  { nombre: 'Escorpio', inicio: '23-10', fin: '21-11', emoji: 'ü¶Ç' },
  { nombre: 'Sagitario', inicio: '22-11', fin: '21-12', emoji: 'üèπ' }
];

// Verificar si un a√±o es bisiesto
function esBisiesto(year) {
  return (year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0));
}

// Verificar si una fecha es v√°lida
function esFechaValida(dia, mes, a√±o) {
  const fecha = new Date(a√±o, mes - 1, dia);
  return fecha.getDate() === dia && fecha.getMonth() === mes - 1;
}

// Convertir string "DD-MM" a Date con a√±o fijo
function parseFechaDM(fechaStr) {
  const [dia, mes] = fechaStr.split('-').map(Number);
  return new Date(2000, mes - 1, dia); // A√±o fijo para comparaci√≥n
}

// Obtener signo zodiacal
function obtenerSigno(fechaUsuario) {
  const [dia, mes, a√±o] = fechaUsuario.split('-').map(Number);

  // Validaciones
  if (mes === 2 && dia > 29) {
    return "Fecha inv√°lida: Febrero no tiene m√°s de 29 d√≠as.";
  }
  if (mes === 2 && dia === 29 && !esBisiesto(a√±o)) {
    return "Fecha inv√°lida: El a√±o no es bisiesto.";
  }
  if (!esFechaValida(dia, mes, a√±o)) {
    return "Fecha inv√°lida: D√≠a fuera de rango.";
  }

  const fecha = new Date(2000, mes - 1, dia); // A√±o fijo para comparaci√≥n

  for (const signo of signos) {
    const inicio = parseFechaDM(signo.inicio);
    const fin = parseFechaDM(signo.fin);

    if (inicio <= fin) {
      if (fecha >= inicio && fecha <= fin) return signo;
    } else {
      if (fecha >= inicio || fecha <= fin) return signo;
    }
  }

  return "Signo no encontrado";
}

// Obtener mensaje de hor√≥scopo
async function obtenerHoroscopo(signo) {
  if (typeof signo === 'string' && signo.startsWith("Fecha inv√°lida")) {
    return signo;
  }

  const mensajes = [
    'Hoy es un buen d√≠a para nuevos comienzos.',
    'Ten cuidado con decisiones impulsivas.',
    'La energ√≠a c√≥smica est√° de tu lado.',
    'Recibir√°s buenas noticias inesperadas.',
    'Alguien cercano necesita tu apoyo.',
    'Es momento de enfocarte en tus metas.',
  ];
  const aleatorio = mensajes[Math.floor(Math.random() * mensajes.length)];
  return `${signo.emoji} ${signo.nombre}: ${aleatorio}`;
}

// Exportaci√≥n por defecto (para uso como m√≥dulo en controlador)
export default {
  obtenerSigno,
  obtenerHoroscopo
};
